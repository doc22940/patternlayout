{"version":3,"sources":["components/pill/Pill.js","components/terminal/Terminal.js","App.js","serviceWorker.js","index.js"],"names":["Pill","props","conversionCharacter","description","innerRef","id","closeable","isClone","onClose","className","ref","CloseButton","onClick","output","PillList","children","initialData","name","Boolean","window","location","hostname","match","ReactDOM","render","useState","available","selected","conversions","setConversions","exampleLog","setExampleLog","updateConversion","newConversions","fetch","method","headers","body","JSON","stringify","pattern","reduce","prev","curr","then","resp","json","message","catch","err","console","error","filter","e","onDragEnd","result","index","element","source","destination","droppableId","itemsCopy2","array","from","to","log","splice","move","Array","fromCopy","toCopy","clonedElement","Object","assign","Math","random","direction","isDropDisabled","provided","droppableProps","map","c","idx","key","draggableId","p1","s1","draggableProps","dragHandleProps","isDragging","placeholder","length","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38227bc1.chunk.js","sourcesContent":["import './Pill.css';\nimport React from 'react';\n\nexport default function Pill(props) {\n    const {\n        conversionCharacter,\n        description,\n        innerRef,\n        id,\n        closeable = false,\n        isClone = false,\n        onClose = () => {},\n    } = props;\n\n    let className = \"pill\";\n\n    if (closeable) {\n        className += \" pill-closeable\";\n    }\n\n    if (isClone) {\n        className += \" pill-clone\";\n    }\n\n    return (\n        <div {...props} ref={innerRef} className={className}>\n            <div>{description}</div>\n            {closeable && <CloseButton id={id} onClose={onClose}/>}\n        </div>\n    );\n}\n\nfunction CloseButton(props) {\n    return <div className=\"close-button\" onClick={() => props.onClose(props.id)}>\n        <div className=\"close-cross\"/>\n    </div>;\n}","import './Terminal.css';\nimport React from \"react\";\n\nexport default function ({output = \"\"}) {\n    return <div id=\"terminal\">\n        <div id=\"header\">\n            <div className=\"button\"></div>\n            <div className=\"button\"></div>\n            <div className=\"button\"></div>\n        </div>\n        <div id=\"content\">\n            {output}\n        </div>\n    </div>\n}","import React, {useState} from 'react';\nimport './App.css';\nimport Pill from \"./components/pill/Pill\";\nimport Terminal from \"./components/terminal/Terminal\";\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\n\nfunction PillList(props) {\n    return <div ref={props.innerRef} className=\"pill-list\">\n        {props.children}\n    </div>\n}\n\nfunction move(array, from, to) {\n    console.log(array);\n    console.log(\"From \" + from + \" to \" + to);\n\n    let element = array[from];\n    array.splice(from, 1);\n    array.splice(to, 0, element);\n\n    console.log(array);\n\n    return array;\n}\n\nfunction removeAtIndexInPlace(index, array) {\n    return array.splice(index, 1)[0];\n}\n\nfunction insertAtIndexInPlace(index, array, element) {\n    array.splice(index, 0, element);\n}\n\nconst initialData = [{id: \"c-1\", conversionCharacter: \"c\", name: 'Category'},\n    {id: \"c-2\", conversionCharacter: \"C\", name: 'Fully Qualified Classname'},\n    {id: \"c-3\", conversionCharacter: \"d\", name: 'Date'},\n    {id: \"c-4\", conversionCharacter: \"F\", name: 'Filename'},\n    {id: \"c-5\", conversionCharacter: \"l\", name: 'Call Location'},\n    {id: \"c-6\", conversionCharacter: \"L\", name: 'Line Number'},\n    {id: \"c-7\", conversionCharacter: \"m\", name: 'Message'},\n    {id: \"c-8\", conversionCharacter: \"M\", name: 'Method Name'},\n    {id: \"c-9\", conversionCharacter: \"n\", name: 'Newline'},\n    {id: \"c-10\", conversionCharacter: \"p\", name: 'Priority'},\n    {id: \"c-11\", conversionCharacter: \"r\", name: 'Layout creation time'},\n    {id: \"c-12\", conversionCharacter: \"t\", name: 'Thread'},\n    {id: \"c-13\", conversionCharacter: \"x\", name: 'Nested Diagnostic context'},\n    {id: \"c-14\", conversionCharacter: \"X\", name: 'Mapped diagnostic context'},\n    {id: \"c-15\", conversionCharacter: \" \", name: 'Whitespace'},\n    {id: \"c-16\", conversionCharacter: \"%\", name: 'Percentage sign'}\n];\n\nexport default function App() {\n    const [conversions, setConversions] = useState({\n        available: initialData,\n        selected: []\n    });\n\n    const [exampleLog, setExampleLog] = useState(\"\");\n\n    const onDragEnd = (result) => {\n\n        const {source, destination} = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n\n        // re-order within the same list\n        if (source.droppableId === destination.droppableId) {\n\n            const itemsCopy = Array.from(conversions[source.droppableId]);\n            const itemsCopy2 = move(itemsCopy, source.index, destination.index);\n\n            updateConversion({\n                ...conversions,\n                [source.droppableId]: itemsCopy2,\n            })\n\n        } else {\n            let fromCopy = Array.from(conversions[source.droppableId]);\n            let toCopy = Array.from(conversions[destination.droppableId]);\n\n            // const removedElement = removeAtIndexInPlace(source.index, fromCopy);\n\n            // create a clone!\n            const clonedElement = Object.assign({}, fromCopy[source.index]);\n\n            // TODO: Use collision-free id!\n            clonedElement.id = \"\" + Math.random();\n            insertAtIndexInPlace(destination.index, toCopy, clonedElement);\n\n           updateConversion({\n                [source.droppableId]: fromCopy,\n                [destination.droppableId]: toCopy\n            });\n        }\n    };\n\n    const updateConversion = (newConversions) => {\n\n        setConversions(newConversions);\n\n        fetch(\"https://patternlayout-server.florianschmidt.me/format\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({pattern: newConversions.selected.reduce((prev, curr) => prev + \"%\" + curr.conversionCharacter, \"\")})\n        })\n            .then(resp => resp.json())\n            .then(json => setExampleLog(json.message))\n            .catch(err => {\n                // eslint-disable-next-line no-console\n                console.error(err)\n            });\n    }\n\n    const onClose = (id) => {\n        updateConversion({\n            available: conversions.available,\n            selected: conversions.selected.filter(e => e.id !== id)\n        });\n    };\n\n    const templateString = () => {\n        if (conversions.selected.length === 0) {\n            return \"Your template string will appear here!\";\n        } else {\n            return conversions.selected.reduce((prev, curr) => prev + \"%\" + curr.conversionCharacter, \"\");\n        }\n    };\n\n\n    return (\n        <div className=\"App\">\n            <header>\n                <h1>PatternLayout</h1>\n                <p>Your interactive guide to Log4j PatternLayouts</p>\n            </header>\n\n            <main>\n\n                <DragDropContext onDragEnd={onDragEnd}>\n\n                    <Droppable droppableId=\"available\" direction=\"horizontal\" isDropDisabled={true}>\n                        {\n                            provided => (\n                                <PillList innerRef={provided.innerRef} {...provided.droppableProps}>\n                                    {conversions.available.map((c, idx) =>\n                                        <Draggable key={c.id} draggableId={c.id} index={idx}>\n                                            {(p1, s1) =>\n                                                <>\n                                                    <Pill {...p1.draggableProps} {...p1.dragHandleProps}\n                                                          id={c.id}\n                                                          idx={idx}\n                                                          innerRef={p1.innerRef}\n                                                          conversionCharacter={c.conversionCharacter}\n                                                          description={c.name}/>\n                                                    {s1.isDragging && <Pill isClone={true} conversionCharacter={c.conversionCharacter} description={c.name}/>}\n                                                    {p1.placeholder}\n                                                </>\n                                            }\n                                        </Draggable>\n                                    )}\n                                </PillList>\n                            )\n                        }\n                    </Droppable>\n\n                    <Droppable droppableId=\"selected\" direction=\"horizontal\">\n                        {\n                            provided => (\n                                <div\n                                    className={conversions.selected.length !== 0 ? \"dropzone\" : \"dropzone dropzone-empty\"}\n                                    ref={provided.innerRef} {...provided.droppableProps}>\n                                    {conversions.selected.map((c, idx) =>\n                                        <Draggable key={c.id} draggableId={c.id} index={idx}>\n                                            {p1 => <Pill {...p1.draggableProps} {...p1.dragHandleProps}\n                                                         id={c.id}\n                                                         innerRef={p1.innerRef}\n                                                         conversionCharacter={c.conversionCharacter}\n                                                         description={c.name}\n                                                         onClose={onClose}\n                                                         closeable\n                                            />}\n                                        </Draggable>\n                                    )}\n                                    {provided.placeholder}\n                                    {conversions.selected.length === 0 && \"Drag your elements here\"}\n                                </div>\n                            )\n                        }\n                    </Droppable>\n                </DragDropContext>\n\n                <div className=\"templateString\">{templateString()}</div>\n                <Terminal output={exampleLog}/>\n            </main>\n\n            <footer>\n                Made by Florian Schmidt in Munich – Impressum – Datenschutzerklärung\n            </footer>\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}